diff -ur opencl.old/configure.ac opencl/configure.ac
--- opencl.old/configure.ac	2019-01-14 11:00:33.285977281 +0100
+++ opencl/configure.ac	2019-01-14 11:44:14.442661722 +0100
@@ -164,6 +164,16 @@
   [OCL_ICD_VENDORDIR=/etc/OpenCL/vendors])
 AC_SUBST([OCL_ICD_VENDORDIR])
 
+AC_ARG_WITH([extra-vendordir],
+  [AS_HELP_STRING([--extra-vendor-dir=DIR],
+                  [add  the given directory to search path to look for .icd files])],
+  [OCL_ICD_VENDORDIR_2="$with_extra_vendordir"
+   USE_VENDORDIR_2=true],
+  [OCL_ICD_VENDORDIR_2=""
+   USE_VENDORDIR_2=true])
+AM_CONDITIONAL([USE_VENDORDIR_2], ["$USE_VENDORDIR_2"])
+AC_SUBST([OCL_ICD_VENDORDIR_2])
+
 AS_IF([test x"$OCL_ICD_VENDORDIR" = x"/etc/OpenCL/vendors" ], [
   AC_MSG_NOTICE([using the official default vendors directory ($OCL_ICD_VENDORDIR)])
 ], [
Binary files opencl.old/.git/index and opencl/.git/index differ
diff -ur opencl.old/Makefile.am opencl/Makefile.am
--- opencl.old/Makefile.am	2019-01-14 11:00:33.285977281 +0100
+++ opencl/Makefile.am	2019-01-14 11:24:02.302521514 +0100
@@ -44,6 +44,10 @@
 	$(AM_CFLAGS) $(PTHREAD_CFLAGS) \
 	-DETC_OPENCL_VENDORS=\"@OCL_ICD_VENDORDIR@\"
 
+if USE_VENDORDIR_2
+libOpenCL_la_CFLAGS += -DETC_OPENCL_VENDORS_2=\"@OCL_ICD_VENDORDIR_2@\"
+endif
+
 libOpenCL_la_SOURCES = ocl_icd_loader.c ocl_icd_loader.h ocl_icd_debug.h
 nodist_libOpenCL_la_SOURCES = ocl_icd_loader_gen.c ocl_icd.h
 libOpenCL_la_LDFLAGS = -version-info 1:0:0 $(PTHREAD_CFLAGS)
diff -ur opencl.old/ocl_icd_loader.c opencl/ocl_icd_loader.c
--- opencl.old/ocl_icd_loader.c	2019-01-14 11:00:33.285977281 +0100
+++ opencl/ocl_icd_loader.c	2019-01-21 20:10:39.993533849 +0100
@@ -240,8 +240,7 @@
   RETURN(num_icds);
 }
 
-static inline unsigned int _open_drivers(DIR *dir, const char* dir_path) {
-  unsigned int num_icds = 0;
+static inline unsigned int _open_drivers(DIR *dir, const char* dir_path, unsigned int num_icds) {
   struct dirent *ent;
   while( (ent=readdir(dir)) != NULL ){
     if(! _string_end_with_icd(ent->d_name)) {
@@ -580,16 +579,23 @@
   cl_uint num_icds = 0;
   int is_dir = 0;
   DIR *dir = NULL;
+  DIR *dir_2 = NULL;
+  const char* dir_path_2=NULL;
+  const char* vendor_path_2=NULL;
   const char* dir_path=getenv("OCL_ICD_VENDORS");
   const char* vendor_path=getenv("OPENCL_VENDOR_PATH");
   if (! vendor_path || vendor_path[0]==0) {
     vendor_path=ETC_OPENCL_VENDORS;
+#ifdef ETC_OPENCL_VENDORS_2
+    vendor_path_2=ETC_OPENCL_VENDORS_2;
+#endif
     debug(D_DUMP, "OPENCL_VENDOR_PATH unset or empty. Using hard-coded path '%s'", vendor_path);
   } else {
     debug(D_DUMP, "OPENCL_VENDOR_PATH set to '%s', using it", vendor_path);
   }
   if (! dir_path || dir_path[0]==0) {
     dir_path=vendor_path;
+    dir_path_2=vendor_path_2;
     debug(D_DUMP, "OCL_ICD_VENDORS empty or not defined, using vendors path '%s'", dir_path);
     is_dir=1;
   }
@@ -620,6 +626,20 @@
     }
 
     num_icds = _find_num_icds(dir);
+
+    if (dir_path_2 != NULL) {
+      dir_2 = opendir(dir_path_2);
+      if(dir_2 == NULL) {
+	if (errno == ENOTDIR) {
+	  debug(D_DUMP, "%s is not a directory, trying to use it as a ICD libname",
+		dir_path_2);
+	  goto abort;
+	}
+      } else {
+	num_icds += _find_num_icds(dir_2);
+      }
+    }
+
     if(num_icds == 0) {
       goto abort;
     }
@@ -643,7 +663,10 @@
       num_icds = _load_icd(0, dir_path);
     }
   } else {
-    num_icds = _open_drivers(dir, dir_path);
+    num_icds = _open_drivers(dir, dir_path, 0);
+    if ((dir_path_2 != NULL) && (dir_2 != NULL)) {
+      num_icds = _open_drivers(dir_2, dir_path_2, num_icds);
+    }
   }
   if(num_icds == 0) {
     goto abort;
@@ -672,6 +695,9 @@
   if (dir != NULL){
     closedir(dir);
   }
+  if (dir_2 != NULL){
+    closedir(dir_2);
+  }
   return;
 }
 
