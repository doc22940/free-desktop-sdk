From 84161c3a7e166ef244fb59e6bd7e7c9b1e9d2d14 Mon Sep 17 00:00:00 2001
From: Thomas Coldrick <othko97@gmail.com>
Date: Thu, 29 Aug 2019 13:06:21 +0100
Subject: [PATCH] Update to openh264 2.0.0

---
 codec/api/svc/codec_api.h     | 94 ++++++++++++++++++++---------------
 codec/api/svc/codec_app_def.h | 55 +++++++++++---------
 codec/api/svc/codec_ver.h     | 10 ++--
 meson.build                   |  4 +-
 4 files changed, 94 insertions(+), 69 deletions(-)

diff --git a/codec/api/svc/codec_api.h b/codec/api/svc/codec_api.h
index 1b8193b..a1326c8 100644
--- a/codec/api/svc/codec_api.h
+++ b/codec/api/svc/codec_api.h
@@ -61,7 +61,7 @@ typedef unsigned char bool;
   *   * This page is for openh264 codec API usage.
   *   * For how to use the encoder,please refer to page UsageExampleForEncoder
   *   * For how to use the decoder,please refer to page UsageExampleForDecoder
-  *   * For more detail about ISVEncoder,please refer to page ISVCEnoder
+  *   * For more detail about ISVEncoder,please refer to page ISVCEncoder
   *   * For more detail about ISVDecoder,please refer to page ISVCDecoder
 */
 
@@ -94,7 +94,7 @@ typedef unsigned char bool;
   *
   * Step 2:decoder creation
   * @code
-  *  CreateDecoder(pSvcDecoder);
+  *  WelsCreateDecoder(&pSvcDecoder);
   * @endcode
   *
   * Step 3:declare required parameter, used to differentiate Decoding only and Parsing only
@@ -107,44 +107,44 @@ typedef unsigned char bool;
   *
   * Step 4:initialize the parameter and decoder context, allocate memory
   * @code
-  *  Initialize(&sDecParam);
+  *  pSvcDecoder->Initialize(&sDecParam);
   * @endcode
   *
   * Step 5:do actual decoding process in slice level;
   *        this can be done in a loop until data ends
   * @code
   *  //for Decoding only
-  *  iRet = DecodeFrameNoDelay(pBuf, iSize, pData, &sDstBufInfo);
+  *  iRet = pSvcDecoder->DecodeFrameNoDelay(pBuf, iSize, pData, &sDstBufInfo);
   *  //or
-  *  iRet = DecodeFrame2(pBuf, iSize, pData, &sDstBufInfo);
+  *  iRet = pSvcDecoder->DecodeFrame2(pBuf, iSize, pData, &sDstBufInfo);
   *  //for Parsing only
-  *  iRet = DecodeParser(pBuf, iSize, &sDstParseInfo);
+  *  iRet = pSvcDecoder->DecodeParser(pBuf, iSize, &sDstParseInfo);
   *  //decode failed
   *  If (iRet != 0){
-  *      RequestIDR or something like that.
+  *      //error handling (RequestIDR or something like that)
   *  }
   *  //for Decoding only, pData can be used for render.
   *  if (sDstBufInfo.iBufferStatus==1){
-  *      output pData[0], pData[1], pData[2];
+  *      //output handling (pData[0], pData[1], pData[2])
   *  }
   * //for Parsing only, sDstParseInfo can be used for, e.g., HW decoding
   *  if (sDstBufInfo.iNalNum > 0){
-  *      Hardware decoding sDstParseInfo;
+  *      //Hardware decoding sDstParseInfo;
   *  }
   *  //no-delay decoding can be realized by directly calling DecodeFrameNoDelay(), which is the recommended usage.
   *  //no-delay decoding can also be realized by directly calling DecodeFrame2() again with NULL input, as in the following. In this case, decoder would immediately reconstruct the input data. This can also be used similarly for Parsing only. Consequent decoding error and output indication should also be considered as above.
-  *  iRet = DecodeFrame2(NULL, 0, pData, &sDstBufInfo);
-  *  judge iRet, sDstBufInfo.iBufferStatus ...
+  *  iRet = pSvcDecoder->DecodeFrame2(NULL, 0, pData, &sDstBufInfo);
+  *  //judge iRet, sDstBufInfo.iBufferStatus ...
   * @endcode
   *
   * Step 6:uninitialize the decoder and memory free
   * @code
-  *  Uninitialize();
+  *  pSvcDecoder->Uninitialize();
   * @endcode
   *
   * Step 7:destroy the decoder
   * @code
-  *  DestroyDecoder();
+  *  DestroyDecoder(pSvcDecoder);
   * @endcode
   *
 */
@@ -157,16 +157,17 @@ typedef unsigned char bool;
   *
   * Step1:setup encoder
   * @code
+  *  ISVCEncoder*  encoder_;
   *  int rv = WelsCreateSVCEncoder (&encoder_);
-  *  ASSERT_EQ (0, rv);
-  *  ASSERT_TRUE (encoder_ != NULL);
+  *  assert (rv == 0);
+  *  assert (encoder_ != NULL);
   * @endcode
   *
   * Step2:initilize with basic parameter
   * @code
   *  SEncParamBase param;
   *  memset (&param, 0, sizeof (SEncParamBase));
-  *  param.iUsageType = usageType;
+  *  param.iUsageType = usageType; //from EUsageType enum
   *  param.fMaxFrameRate = frameRate;
   *  param.iPicWidth = width;
   *  param.iPicHeight = height;
@@ -186,7 +187,7 @@ typedef unsigned char bool;
   *  int frameSize = width * height * 3 / 2;
   *  BufferedData buf;
   *  buf.SetLength (frameSize);
-  *  ASSERT_TRUE (buf.Length() == (size_t)frameSize);
+  *  assert (buf.Length() == (size_t)frameSize);
   *  SFrameBSInfo info;
   *  memset (&info, 0, sizeof (SFrameBSInfo));
   *  SSourcePicture pic;
@@ -202,9 +203,9 @@ typedef unsigned char bool;
   *  for(int num = 0;num<total_num;num++) {
   *     //prepare input data
   *     rv = encoder_->EncodeFrame (&pic, &info);
-  *     ASSERT_TRUE (rv == cmResultSuccess);
-  *     if (info.eFrameType != videoFrameTypeSkip && cbk != NULL) {
-  *      //output bitstream
+  *     assert (rv == cmResultSuccess);
+  *     if (info.eFrameType != videoFrameTypeSkip) {
+  *      //output bitstream handling
   *     }
   *  }
   * @endcode
@@ -229,7 +230,7 @@ typedef unsigned char bool;
   * Step 2:initialize with extension parameter
   * @code
   *  SEncParamExt param;
-  *  encoder->GetDefaultParams (&param);
+  *  encoder_->GetDefaultParams (&param);
   *  param.iUsageType = usageType;
   *  param.fMaxFrameRate = frameRate;
   *  param.iPicWidth = width;
@@ -319,7 +320,7 @@ class ISVCEncoder {
   * @param  bIDR true: force encoder to encode frame as IDR frame;false, return 1 and nothing to do
   * @return 0 - success; otherwise - failed;
   */
-  virtual int EXTAPI ForceIntraFrame (bool bIDR,int iLayerId = -1) = 0;
+  virtual int EXTAPI ForceIntraFrame (bool bIDR, int iLayerId = -1) = 0;
 
   /**
   * @brief   Set option for encoder, detail option type, please refer to enumurate ENCODER_OPTION.
@@ -329,7 +330,7 @@ class ISVCEncoder {
   virtual int EXTAPI SetOption (ENCODER_OPTION eOptionId, void* pOption) = 0;
 
   /**
-  * @brief   Set option for encoder, detail option type, please refer to enumurate ENCODER_OPTION.
+  * @brief   Get option for encoder, detail option type, please refer to enumurate ENCODER_OPTION.
   * @param   pOption option for encoder such as InDataFormat, IDRInterval, SVC Encode Param, Frame Rate, Bitrate,...
   * @return  CM_RETURN: 0 - success; otherwise - failed;
   */
@@ -372,18 +373,18 @@ class ISVCDecoder {
       int& iWidth,
       int& iHeight) = 0;
 
-/**
-  * @brief    For slice level DecodeFrameNoDelay() (4 parameters input),
-  *           whatever the function return value is, the output data
-  *           of I420 format will only be available when pDstInfo->iBufferStatus == 1,.
-  *           This function will parse and reconstruct the input frame immediately if it is complete
-  *           It is recommended as the main decoding function for H.264/AVC format input
-  * @param   pSrc the h264 stream to be decoded
-  * @param   iSrcLen the length of h264 stream
-  * @param   ppDst buffer pointer of decoded data (YUV)
-  * @param   pDstInfo information provided to API(width, height, etc.)
-  * @return  0 - success; otherwise -failed;
-  */
+  /**
+    * @brief    For slice level DecodeFrameNoDelay() (4 parameters input),
+    *           whatever the function return value is, the output data
+    *           of I420 format will only be available when pDstInfo->iBufferStatus == 1,.
+    *           This function will parse and reconstruct the input frame immediately if it is complete
+    *           It is recommended as the main decoding function for H.264/AVC format input
+    * @param   pSrc the h264 stream to be decoded
+    * @param   iSrcLen the length of h264 stream
+    * @param   ppDst buffer pointer of decoded data (YUV)
+    * @param   pDstInfo information provided to API(width, height, etc.)
+    * @return  0 - success; otherwise -failed;
+    */
   virtual DECODING_STATE EXTAPI DecodeFrameNoDelay (const unsigned char* pSrc,
       const int iSrcLen,
       unsigned char** ppDst,
@@ -406,6 +407,18 @@ class ISVCDecoder {
       unsigned char** ppDst,
       SBufferInfo* pDstInfo) = 0;
 
+
+  /**
+  * @brief   This function gets a decoded ready frame remaining in buffers after the last frame has been decoded.
+  * Use GetOption with option DECODER_OPTION_NUM_OF_FRAMES_REMAINING_IN_BUFFER to get the number of frames remaining in buffers.
+  * Note that it is only applicable for profile_idc != 66
+  * @param   ppDst buffer pointer of decoded data (YUV)
+  * @param   pDstInfo information provided to API(width, height, etc.)
+  * @return  0 - success; otherwise -failed;
+  */
+  virtual DECODING_STATE EXTAPI FlushFrame (unsigned char** ppDst,
+      SBufferInfo* pDstInfo) = 0;
+
   /**
   * @brief   This function parse input bitstream only, and rewrite possible SVC syntax to AVC syntax
   * @param   pSrc the h264 stream to be decoded
@@ -493,15 +506,18 @@ DECODING_STATE (*DecodeFrame) (ISVCDecoder*, const unsigned char* pSrc,
                                int* iHeight);
 
 DECODING_STATE (*DecodeFrameNoDelay) (ISVCDecoder*, const unsigned char* pSrc,
-                                const int iSrcLen,
-                                unsigned char** ppDst,
-                                SBufferInfo* pDstInfo);
+                                      const int iSrcLen,
+                                      unsigned char** ppDst,
+                                      SBufferInfo* pDstInfo);
 
 DECODING_STATE (*DecodeFrame2) (ISVCDecoder*, const unsigned char* pSrc,
                                 const int iSrcLen,
                                 unsigned char** ppDst,
                                 SBufferInfo* pDstInfo);
 
+DECODING_STATE (*FlushFrame) (ISVCDecoder*, unsigned char** ppDst,
+                              SBufferInfo* pDstInfo);
+
 DECODING_STATE (*DecodeParser) (ISVCDecoder*, const unsigned char* pSrc,
                                 const int iSrcLen,
                                 SParserBsInfo* pDstInfo);
@@ -567,7 +583,7 @@ OpenH264Version WelsGetCodecVersion (void);
 /** @brief   Get codec version
  *  @param   pVersion  struct to fill in with the version
 */
-void WelsGetCodecVersionEx (OpenH264Version *pVersion);
+void WelsGetCodecVersionEx (OpenH264Version* pVersion);
 
 #ifdef __cplusplus
 }
diff --git a/codec/api/svc/codec_app_def.h b/codec/api/svc/codec_app_def.h
index fcdcf92..1e26f9f 100644
--- a/codec/api/svc/codec_app_def.h
+++ b/codec/api/svc/codec_app_def.h
@@ -78,13 +78,14 @@ typedef enum {
   /**
   * Errors derived from bitstream parsing
   */
-  dsErrorFree           = 0x00,   ///< bit stream error-free
-  dsFramePending        = 0x01,   ///< need more throughput to generate a frame output,
-  dsRefLost             = 0x02,   ///< layer lost at reference frame with temporal id 0
-  dsBitstreamError      = 0x04,   ///< error bitstreams(maybe broken internal frame) the decoder cared
-  dsDepLayerLost        = 0x08,   ///< dependented layer is ever lost
-  dsNoParamSets         = 0x10,   ///< no parameter set NALs involved
-  dsDataErrorConcealed  = 0x20,   ///< current data error concealed specified
+  dsErrorFree = 0x00,   ///< bit stream error-free
+  dsFramePending = 0x01,   ///< need more throughput to generate a frame output,
+  dsRefLost = 0x02,   ///< layer lost at reference frame with temporal id 0
+  dsBitstreamError = 0x04,   ///< error bitstreams(maybe broken internal frame) the decoder cared
+  dsDepLayerLost = 0x08,   ///< dependented layer is ever lost
+  dsNoParamSets = 0x10,   ///< no parameter set NALs involved
+  dsDataErrorConcealed = 0x20,   ///< current data error concealed specified
+  dsRefListNullPtrs = 0x40, ///<ref picure list contains null ptrs within uiRefCount range
 
   /**
   * Errors derived from logic level
@@ -166,6 +167,7 @@ typedef enum {
   DECODER_OPTION_LEVEL,                 ///< get current AU level info,only is used in GetOption
   DECODER_OPTION_STATISTICS_LOG_INTERVAL,///< set log output interval
   DECODER_OPTION_IS_REF_PIC,             ///< feedback current frame is ref pic or not
+  DECODER_OPTION_NUM_OF_FRAMES_REMAINING_IN_BUFFER  ///< number of frames remaining in decoder buffer when pictures are required to re-ordered into display-order.
 
 } DECODER_OPTION;
 
@@ -345,8 +347,10 @@ typedef enum {
  */
 typedef struct {
   SliceModeEnum uiSliceMode;    ///< by default, uiSliceMode will be SM_SINGLE_SLICE
-  unsigned int  uiSliceNum;     ///< only used when uiSliceMode=1, when uiSliceNum=0 means auto design it with cpu core number
-  unsigned int  uiSliceMbNum[MAX_SLICES_NUM_TMP]; ///< only used when uiSliceMode=2; when =0 means setting one MB row a slice
+  unsigned int
+  uiSliceNum;     ///< only used when uiSliceMode=1, when uiSliceNum=0 means auto design it with cpu core number
+  unsigned int
+  uiSliceMbNum[MAX_SLICES_NUM_TMP]; ///< only used when uiSliceMode=2; when =0 means setting one MB row a slice
   unsigned int  uiSliceSizeConstraint; ///< now only used when uiSliceMode=4
 } SSliceArgument;
 
@@ -361,7 +365,7 @@ typedef enum {
   VF_MAC,
   VF_UNDEF,
   VF_NUM_ENUM
-} EVideoFormatSPS;	// EVideoFormat is already defined/used elsewhere!
+} EVideoFormatSPS;  // EVideoFormat is already defined/used elsewhere!
 
 /**
 * @brief Enumerate the type of color primaries
@@ -461,16 +465,20 @@ typedef struct {
   SSliceArgument sSliceArgument;
 
   // Note: members bVideoSignalTypePresent through uiColorMatrix below are also defined in SWelsSPS in parameter_sets.h.
-  bool			bVideoSignalTypePresent;	// false => do not write any of the following information to the header
-  unsigned char	uiVideoFormat;				// EVideoFormatSPS; 3 bits in header; 0-5 => component, kpal, ntsc, secam, mac, undef
-  bool			bFullRange;					// false => analog video data range [16, 235]; true => full data range [0,255]
-  bool			bColorDescriptionPresent;	// false => do not write any of the following three items to the header
-  unsigned char	uiColorPrimaries;			// EColorPrimaries; 8 bits in header; 0 - 9 => ???, bt709, undef, ???, bt470m, bt470bg,
-                                            //    smpte170m, smpte240m, film, bt2020
-  unsigned char	uiTransferCharacteristics;	// ETransferCharacteristics; 8 bits in header; 0 - 15 => ???, bt709, undef, ???, bt470m, bt470bg, smpte170m,
-										    //   smpte240m, linear, log100, log316, iec61966-2-4, bt1361e, iec61966-2-1, bt2020-10, bt2020-12
-  unsigned char	uiColorMatrix;				// EColorMatrix; 8 bits in header (corresponds to FFmpeg "colorspace"); 0 - 10 => GBR, bt709,
-										    //   undef, ???, fcc, bt470bg, smpte170m, smpte240m, YCgCo, bt2020nc, bt2020c
+  bool      bVideoSignalTypePresent;  // false => do not write any of the following information to the header
+  unsigned char
+  uiVideoFormat;        // EVideoFormatSPS; 3 bits in header; 0-5 => component, kpal, ntsc, secam, mac, undef
+  bool      bFullRange;         // false => analog video data range [16, 235]; true => full data range [0,255]
+  bool      bColorDescriptionPresent; // false => do not write any of the following three items to the header
+  unsigned char
+  uiColorPrimaries;     // EColorPrimaries; 8 bits in header; 0 - 9 => ???, bt709, undef, ???, bt470m, bt470bg,
+  //    smpte170m, smpte240m, film, bt2020
+  unsigned char
+  uiTransferCharacteristics;  // ETransferCharacteristics; 8 bits in header; 0 - 15 => ???, bt709, undef, ???, bt470m, bt470bg, smpte170m,
+  //   smpte240m, linear, log100, log316, iec61966-2-4, bt1361e, iec61966-2-1, bt2020-10, bt2020-12
+  unsigned char
+  uiColorMatrix;        // EColorMatrix; 8 bits in header (corresponds to FFmpeg "colorspace"); 0 - 10 => GBR, bt709,
+  //   undef, ???, fcc, bt470bg, smpte170m, smpte240m, YCgCo, bt2020nc, bt2020c
 
   bool bAspectRatioPresent; ///< aspect ratio present in VUI
   ESampleAspectRatio eAspectRatio; ///< aspect ratio idc
@@ -494,7 +502,7 @@ typedef enum {
 * @brief Enumulate the complexity mode
 */
 typedef enum {
-  LOW_COMPLEXITY = 0 ,             ///< the lowest compleixty,the fastest speed,
+  LOW_COMPLEXITY = 0,              ///< the lowest compleixty,the fastest speed,
   MEDIUM_COMPLEXITY,          ///< medium complexity, medium speed,medium quality
   HIGH_COMPLEXITY             ///< high complexity, lowest speed, high quality
 } ECOMPLEXITY_MODE;
@@ -713,7 +721,7 @@ typedef struct TagDecoderCapability {
 */
 typedef struct TagParserBsInfo {
   int iNalNum;                                 ///< total NAL number in current AU
-  int *pNalLenInByte;  ///< each nal length
+  int* pNalLenInByte;  ///< each nal length
   unsigned char* pDstBuff;                     ///< outputted dst buffer for parsed bitstream
   int iSpsWidthInPixel;                        ///< required SPS width info
   int iSpsHeightInPixel;                       ///< required SPS height info
@@ -770,7 +778,8 @@ typedef struct TagVideoDecoderStatistics {
   unsigned int uiEcIDRNum;                     ///< number of actual unintegrity IDR or not received but eced
   unsigned int uiEcFrameNum;                   ///<
   unsigned int uiIDRLostNum;                   ///< number of whole lost IDR
-  unsigned int uiFreezingIDRNum;               ///< number of freezing IDR with error (partly received), under resolution change
+  unsigned int
+  uiFreezingIDRNum;               ///< number of freezing IDR with error (partly received), under resolution change
   unsigned int uiFreezingNonIDRNum;            ///< number of freezing non-IDR with error
   int iAvgLumaQp;                              ///< average luma QP. default: -1, no correct frame outputted
   int iSpsReportErrorNum;                      ///< number of Sps Invalid report
diff --git a/codec/api/svc/codec_ver.h b/codec/api/svc/codec_ver.h
index 03a596c..06d5efc 100644
--- a/codec/api/svc/codec_ver.h
+++ b/codec/api/svc/codec_ver.h
@@ -4,12 +4,12 @@
 
 #include "codec_app_def.h"
 
-static const OpenH264Version g_stCodecVersion  = {1, 8, 0, 1806};
-static const char* const g_strCodecVer  = "OpenH264 version:1.8.0.1806";
+static const OpenH264Version g_stCodecVersion  = {2, 0, 0, 1905};
+static const char* const g_strCodecVer  = "OpenH264 version:2.0.0.1905";
 
-#define OPENH264_MAJOR (1)
-#define OPENH264_MINOR (8)
+#define OPENH264_MAJOR (2)
+#define OPENH264_MINOR (0)
 #define OPENH264_REVISION (0)
-#define OPENH264_RESERVED (1806)
+#define OPENH264_RESERVED (1905)
 
 #endif  // CODEC_VER_H
diff --git a/meson.build b/meson.build
index a737568..e8c5f33 100644
--- a/meson.build
+++ b/meson.build
@@ -8,8 +8,8 @@ project('noopenh264', ['cpp'],
   ],
 )
 
-major_version = '4'
-matching_version = '1.8.0'
+major_version = '5'
+matching_version = '2.0.0'
 
 pkgconfig = import('pkgconfig')
 
-- 
2.22.0

