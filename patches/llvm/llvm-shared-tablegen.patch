diff -ur llvm8.old/llvm/cmake/modules/AddLLVM.cmake llvm8/llvm/cmake/modules/AddLLVM.cmake
--- llvm8.old/llvm/cmake/modules/AddLLVM.cmake	2019-05-15 17:46:11.153869115 +0200
+++ llvm8/llvm/cmake/modules/AddLLVM.cmake	2019-05-21 11:33:52.051845364 +0200
@@ -550,6 +550,8 @@
        ${LLVM_LINK_COMPONENTS}
        )
     endif()
+  elseif (${name} STREQUAL "LLVMTableGenShared" AND LLVM_BUILD_LLVM_DYLIB)
+    target_link_libraries(${name} PRIVATE LLVM)
   else()
     # Components have not been defined explicitly in CMake, so add the
     # dependency information for this library as defined by LLVMBuild.
@@ -645,7 +647,7 @@
   else()
     if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY OR ${name} STREQUAL "LTO" OR
         ${name} STREQUAL "OptRemarks" OR
-        (LLVM_LINK_LLVM_DYLIB AND ${name} STREQUAL "LLVM"))
+        (LLVM_LINK_LLVM_DYLIB AND (${name} STREQUAL "LLVM" OR ${name} STREQUAL "LLVMTableGenShared")))
       set(install_dir lib${LLVM_LIBDIR_SUFFIX})
       if(ARG_MODULE OR ARG_SHARED OR BUILD_SHARED_LIBS)
         if(WIN32 OR CYGWIN OR MINGW)
@@ -662,10 +664,13 @@
         set(install_type LIBRARY)
       endif()
 
+      set(export_to_llvmexports)
       if(${name} IN_LIST LLVM_DISTRIBUTION_COMPONENTS OR
           NOT LLVM_DISTRIBUTION_COMPONENTS)
-        set(export_to_llvmexports EXPORT LLVMExports)
-        set_property(GLOBAL PROPERTY LLVM_HAS_EXPORTS True)
+	if(ARG_MODULE OR ARG_SHARED OR BUILD_SHARED_LIBS)
+          set(export_to_llvmexports EXPORT LLVMExports)
+          set_property(GLOBAL PROPERTY LLVM_HAS_EXPORTS True)
+	endif()
       endif()
 
       install(TARGETS ${name}
@@ -679,7 +684,10 @@
                                  COMPONENT ${name})
       endif()
     endif()
-    set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS ${name})
+    if(ARG_MODULE OR ARG_SHARED OR BUILD_SHARED_LIBS)
+      set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS ${name})
+    else()
+    endif()
   endif()
   if (ARG_MODULE)
     set_target_properties(${name} PROPERTIES FOLDER "Loadable modules")
diff -ur llvm8.old/llvm/lib/TableGen/CMakeLists.txt llvm8/llvm/lib/TableGen/CMakeLists.txt
--- llvm8.old/llvm/lib/TableGen/CMakeLists.txt	2019-05-15 17:46:11.245868219 +0200
+++ llvm8/llvm/lib/TableGen/CMakeLists.txt	2019-05-20 13:21:53.127591749 +0200
@@ -1,3 +1,24 @@
+if (LLVM_BUILD_LLVM_DYLIB)
+  add_llvm_library(LLVMTableGenShared
+    Error.cpp
+    JSONBackend.cpp
+    Main.cpp
+    Record.cpp
+    SetTheory.cpp
+    StringMatcher.cpp
+    TableGenBackend.cpp
+    TGLexer.cpp
+    TGParser.cpp
+
+    SHARED
+
+    ADDITIONAL_HEADER_DIRS
+    ${LLVM_MAIN_INCLUDE_DIR}/llvm/TableGen
+
+    OUTPUT_NAME LLVMTableGen
+    )
+endif()
+
 add_llvm_library(LLVMTableGen
   Error.cpp
   JSONBackend.cpp
diff -ur llvm8.old/llvm/tools/llvm-config/llvm-config.cpp llvm8/llvm/tools/llvm-config/llvm-config.cpp
--- llvm8.old/llvm/tools/llvm-config/llvm-config.cpp	2019-05-15 17:46:19.661786287 +0200
+++ llvm8/llvm/tools/llvm-config/llvm-config.cpp	2019-05-20 20:46:27.885656279 +0200
@@ -686,6 +686,13 @@
       };
 
       if (LinkMode == LinkModeShared && LinkDyLib) {
+        for (unsigned i = 0, e = RequiredLibs.size(); i != e; ++i) {
+	  if (RequiredLibs[i] == "LLVMTableGen") {
+	    PrintForLib(RequiredLibs[i]);
+	    OS << ' ';
+	    break ;
+	  }
+	}
         PrintForLib(DyLibName);
       } else {
         for (unsigned i = 0, e = RequiredLibs.size(); i != e; ++i) {
diff -ur llvm8.old/llvm/utils/llvm-build/llvmbuild/main.py llvm8/llvm/utils/llvm-build/llvmbuild/main.py
--- llvm8.old/llvm/utils/llvm-build/llvmbuild/main.py	2019-05-15 17:46:19.865784301 +0200
+++ llvm8/llvm/utils/llvm-build/llvmbuild/main.py	2019-05-21 00:08:26.439229319 +0200
@@ -360,6 +360,7 @@
         root_entries = set(e[0] for e in entries)
         for _,_,deps,_ in entries:
             root_entries -= set(deps)
+        root_entries.remove('tablegen')
         entries.append(('all', None, root_entries, True))
 
         entries.sort()
