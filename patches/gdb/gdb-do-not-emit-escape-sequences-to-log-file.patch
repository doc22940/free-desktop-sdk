From 0735b091aba72d4b35aebb671a02c5cb4a837fe9 Mon Sep 17 00:00:00 2001
From: Tom Tromey <tromey@adacore.com>
Date: Tue, 30 Apr 2019 11:17:15 -0600
Subject: [PATCH] Do not emit style escape sequences to log file

PR gdb/24502 requests that the "set logging" log file not contain
style escape sequences emitted by gdb.

This seemed like a reasonable request to me, so this patch implements
filtering for the log file.

This also updates a comment in ui-style.h that I noticed while writing
the patch.

Tested on x86-64 Fedora 29.

gdb/ChangeLog
2019-06-14  Tom Tromey  <tromey@adacore.com>

	PR gdb/24502:
	* ui-style.h (skip_ansi_escape): Update comment.
	* ui-file.h (class no_terminal_escape_file): New class.
	* ui-file.c (no_terminal_escape_file::write)
	(no_terminal_escape_file::puts): New methods.
	* cli/cli-logging.c (handle_redirections): Use
	no_terminal_escape_file.

gdb/testsuite/ChangeLog
2019-06-14  Tom Tromey  <tromey@adacore.com>

	PR gdb/24502:
	* gdb.base/style-logging.exp: New file.
---
 gdb/ChangeLog                            | 10 +++++
 gdb/cli/cli-logging.c                    |  2 +-
 gdb/testsuite/ChangeLog                  |  5 +++
 gdb/testsuite/gdb.base/style-logging.exp | 70 ++++++++++++++++++++++++++++++++
 gdb/ui-file.c                            | 32 +++++++++++++++
 gdb/ui-file.h                            | 16 ++++++++
 gdb/ui-style.h                           |  4 +-
 7 files changed, 136 insertions(+), 3 deletions(-)
 create mode 100644 gdb/testsuite/gdb.base/style-logging.exp

diff --git a/gdb/cli/cli-logging.c b/gdb/cli/cli-logging.c
index bef5f39..a8b9955 100644
--- a/gdb/cli/cli-logging.c
+++ b/gdb/cli/cli-logging.c
@@ -100,7 +100,7 @@ handle_redirections (int from_tty)
       return;
     }
 
-  stdio_file_up log (new stdio_file ());
+  stdio_file_up log (new no_terminal_escape_file ());
   if (!log->open (logging_filename, logging_overwrite ? "w" : "a"))
     perror_with_name (_("set logging"));
 
diff --git a/gdb/ui-file.c b/gdb/ui-file.c
index 24c914f..05d411a 100644
--- a/gdb/ui-file.c
+++ b/gdb/ui-file.c
@@ -396,3 +396,35 @@ tee_file::can_emit_style_escape ()
 	  && m_one->term_out ()
 	  && term_cli_styling ());
 }
+
+/* See ui-file.h.  */
+
+void
+no_terminal_escape_file::write (const char *buf, long length_buf)
+{
+  std::string copy (buf, length_buf);
+  this->puts (copy.c_str ());
+}
+
+/* See ui-file.h.  */
+
+void
+no_terminal_escape_file::puts (const char *buf)
+{
+  while (*buf != '\0')
+    {
+      const char *esc = strchr (buf, '\033');
+      if (esc == nullptr)
+	break;
+
+      int n_read = 0;
+      if (!skip_ansi_escape (esc, &n_read))
+	++esc;
+
+      this->stdio_file::write (buf, esc - buf);
+      buf = esc + n_read;
+    }
+
+  if (*buf != '\0')
+    this->stdio_file::write (buf, strlen (buf));
+}
diff --git a/gdb/ui-file.h b/gdb/ui-file.h
index 39f56d5..3f6f38a 100644
--- a/gdb/ui-file.h
+++ b/gdb/ui-file.h
@@ -287,4 +287,20 @@ private:
   ui_file_up m_two;
 };
 
+/* A ui_file implementation that filters out terminal escape
+   sequences.  */
+
+class no_terminal_escape_file : public stdio_file
+{
+public:
+  no_terminal_escape_file ()
+  {
+  }
+
+  /* Like the stdio_file methods, but these filter out terminal escape
+     sequences.  */
+  void write (const char *buf, long length_buf) override;
+  void puts (const char *linebuffer) override;
+};
+
 #endif
diff --git a/gdb/ui-style.h b/gdb/ui-style.h
index 2a87fbe..24b4b59 100644
--- a/gdb/ui-style.h
+++ b/gdb/ui-style.h
@@ -233,8 +233,8 @@ private:
 
 /* Skip an ANSI escape sequence in BUF.  BUF must begin with an ESC
    character.  Return true if an escape sequence was successfully
-   skipped; false otherwise.  In either case, N_READ is updated to
-   reflect the number of chars read from BUF.  */
+   skipped; false otherwise.  If an escape sequence was skipped,
+   N_READ is updated to reflect the number of chars read from BUF.  */
 
 extern bool skip_ansi_escape (const char *buf, int *n_read);
 
-- 
2.9.3

