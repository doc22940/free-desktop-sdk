From 98c90f80283bbdf7df140041e3b784bfcb3b1d39 Mon Sep 17 00:00:00 2001
From: Tom Tromey <tromey@adacore.com>
Date: Sat, 3 Aug 2019 09:42:28 +0200
Subject: [PATCH] Fix crash in cp_print_value_fields

[ Backport of master commit 4330d61dfb. ]

PR c++/20020 concerns a crash in cp_print_value_fields.  The immediate
cause is that cp_print_value_fields does not handle the case where
value_static_field fails.  This is fixed in this patch by calling
cp_print_static_field from the "try" block.

Digging a bit deeper, the error occurs because GCC does not emit a
DW_AT_const_value for a static constexpr member appearing in a
template class.  I've filed a GCC bug for this.

Tested on x86-64 Fedora 29.

gdb/ChangeLog
2019-05-29  Tom Tromey  <tromey@adacore.com>

	PR c++/20020:
	* cp-valprint.c (cp_print_value_fields): Call
	cp_print_static_field inside "try".

gdb/testsuite/ChangeLog
2019-05-29  Tom Tromey  <tromey@adacore.com>

	PR c++/20020:
	* gdb.cp/constexpr-field.exp: New file.
	* gdb.cp/constexpr-field.cc: New file.
---
 gdb/ChangeLog                            |  6 ++++++
 gdb/cp-valprint.c                        | 13 +++++------
 gdb/testsuite/ChangeLog                  |  6 ++++++
 gdb/testsuite/gdb.cp/constexpr-field.cc  | 37 ++++++++++++++++++++++++++++++++
 gdb/testsuite/gdb.cp/constexpr-field.exp | 36 +++++++++++++++++++++++++++++++
 5 files changed, 90 insertions(+), 8 deletions(-)
 create mode 100644 gdb/testsuite/gdb.cp/constexpr-field.cc
 create mode 100644 gdb/testsuite/gdb.cp/constexpr-field.exp

diff --git a/gdb/cp-valprint.c b/gdb/cp-valprint.c
index 7124da4..8feaae0 100644
--- a/gdb/cp-valprint.c
+++ b/gdb/cp-valprint.c
@@ -314,13 +314,14 @@ cp_print_value_fields (struct type *type, struct type *real_type,
 		}
 	      else if (field_is_static (&TYPE_FIELD (type, i)))
 		{
-		  struct value *v = NULL;
-
 		  TRY
 		    {
-		      v = value_static_field (type, i);
-		    }
+		      struct value *v = value_static_field (type, i);
 
+		      cp_print_static_field (TYPE_FIELD_TYPE (type, i),
+					     v, stream, recurse + 1,
+					     options);
+		    }
 		  CATCH (ex, RETURN_MASK_ERROR)
 		    {
 		      fprintf_filtered (stream,
@@ -328,10 +329,6 @@ cp_print_value_fields (struct type *type, struct type *real_type,
 					ex.message);
 		    }
 		  END_CATCH
-
-		  cp_print_static_field (TYPE_FIELD_TYPE (type, i),
-					 v, stream, recurse + 1,
-					 options);
 		}
 	      else if (i == vptr_fieldno && type == vptr_basetype)
 		{
-- 
2.9.3

