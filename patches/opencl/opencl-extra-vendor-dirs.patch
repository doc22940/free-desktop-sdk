diff -ur ocl-icd/configure.ac ocl-icd.patch/configure.ac
--- ocl-icd/configure.ac	2019-01-21 11:09:11.481702469 +0100
+++ ocl-icd.patch/configure.ac	2019-01-23 09:39:09.823849931 +0100
@@ -170,6 +170,26 @@
   AC_MSG_NOTICE([using an unofficial custom default vendors directory ($OCL_ICD_VENDORDIR)])
 ])
 
+AC_ARG_WITH([opencl-libdir],
+  [AS_HELP_STRING([--with-opencl-libdir],
+                  [add  libdir directory to the given directory to search path to look for .icd files])],
+  [OCL_ICD_LIBDIR="$libdir/OpenCL/vendors"
+   USE_OPENCL_LIBDIR=true],
+  [OCL_ICD_LIBDIR=""
+   USE_OPENCL_LIBDIR=true])
+AM_CONDITIONAL([USE_OPENCL_LIBDIR], ["$USE_OPENCL_LIBDIR"])
+AC_SUBST([OCL_ICD_LIBDIR])
+
+AC_ARG_WITH([opencl-libdir-gl],
+  [AS_HELP_STRING([--with-opencl-libdir-gl],
+                  [add  libdir/GL extension directory to the given directory to search path to look for .icd files])],
+  [OCL_ICD_LIBDIR_GL="$libdir/GL/OpenCL/vendors"
+   USE_OPENCL_LIBDIR_GL=true],
+  [OCL_ICD_LIBDIR_GL=""
+   USE_OPENCL_LIBDIR_GL=true])
+AM_CONDITIONAL([USE_OPENCL_LIBDIR_GL], ["$USE_OPENCL_LIBDIR_GL"])
+AC_SUBST([OCL_ICD_LIBDIR_GL])
+
 # always use versionned symbols (check required for MacOSX)
 AM_CONDITIONAL([USE_MAP], [true])
 
diff -ur ocl-icd/Makefile.am ocl-icd.patch/Makefile.am
--- ocl-icd/Makefile.am	2019-01-21 11:09:11.481702469 +0100
+++ ocl-icd.patch/Makefile.am	2019-01-23 09:39:09.823849931 +0100
@@ -44,6 +44,13 @@
 	$(AM_CFLAGS) $(PTHREAD_CFLAGS) \
 	-DETC_OPENCL_VENDORS=\"@OCL_ICD_VENDORDIR@\"
 
+if USE_OPENCL_LIBDIR
+libOpenCL_la_CFLAGS += -DLIBDIR_OPENCL_VENDORS=\"@OCL_ICD_LIBDIR@\"
+endif
+if USE_OPENCL_LIBDIR_GL
+libOpenCL_la_CFLAGS += -DLIBDIR_GL_OPENCL_VENDORS=\"@OCL_ICD_LIBDIR_GL@\"
+endif
+
 libOpenCL_la_SOURCES = ocl_icd_loader.c ocl_icd_loader.h ocl_icd_debug.h
 nodist_libOpenCL_la_SOURCES = ocl_icd_loader_gen.c ocl_icd.h
 libOpenCL_la_LDFLAGS = -version-info 1:0:0 $(PTHREAD_CFLAGS)
diff -ur ocl-icd/ocl_icd_loader.c ocl-icd.patch/ocl_icd_loader.c
--- ocl-icd/ocl_icd_loader.c	2019-01-21 11:09:11.485035802 +0100
+++ ocl-icd.patch/ocl_icd_loader.c	2019-01-24 07:44:00.236612370 +0100
@@ -240,8 +240,7 @@
   RETURN(num_icds);
 }
 
-static inline unsigned int _open_drivers(DIR *dir, const char* dir_path) {
-  unsigned int num_icds = 0;
+static inline unsigned int _open_drivers(DIR *dir, const char* dir_path,  cl_uint num_icds) {
   struct dirent *ent;
   while( (ent=readdir(dir)) != NULL ){
     if(! _string_end_with_icd(ent->d_name)) {
@@ -579,18 +578,35 @@
   debug_init();
   cl_uint num_icds = 0;
   int is_dir = 0;
+  int user_dir = 0;
   DIR *dir = NULL;
+  DIR *dir_libdir = NULL;
+  DIR *dir_libdir_gl = NULL;
+  const char* dir_path_libdir=NULL;
+  const char* dir_path_libdir_gl=NULL;
   const char* dir_path=getenv("OCL_ICD_VENDORS");
   const char* vendor_path=getenv("OPENCL_VENDOR_PATH");
   if (! vendor_path || vendor_path[0]==0) {
     vendor_path=ETC_OPENCL_VENDORS;
     debug(D_DUMP, "OPENCL_VENDOR_PATH unset or empty. Using hard-coded path '%s'", vendor_path);
+
   } else {
     debug(D_DUMP, "OPENCL_VENDOR_PATH set to '%s', using it", vendor_path);
   }
   if (! dir_path || dir_path[0]==0) {
     dir_path=vendor_path;
     debug(D_DUMP, "OCL_ICD_VENDORS empty or not defined, using vendors path '%s'", dir_path);
+/* freedesktop  appropriate drivers */
+#ifdef LIBDIR_GL_OPENCL_VENDORS
+    dir_path_libdir_gl=LIBDIR_GL_OPENCL_VENDORS;
+    debug(D_DUMP, "OCL set LIBDIR_GL search path '%s'", dir_path_libdir_gl);
+#endif
+
+/* freedesktop opensource drivers */
+#ifdef LIBDIR_OPENCL_VENDORS
+    dir_path_libdir=LIBDIR_OPENCL_VENDORS;
+    debug(D_DUMP, "OCL set LIBDIR search path '%s'", dir_path_libdir);
+#endif
     is_dir=1;
   }
   if (!is_dir) {
@@ -601,6 +617,7 @@
     }
     if (ret == 0 && S_ISDIR(buf.st_mode)) {
       is_dir=1;
+      user_dir=1;
     }
   }
 
@@ -612,14 +629,55 @@
     debug(D_LOG,"Reading icd list from '%s'", dir_path);
     dir = opendir(dir_path);
     if(dir == NULL) {
-      if (errno == ENOTDIR) {
+    	if (errno == ENOTDIR) {
         debug(D_DUMP, "%s is not a directory, trying to use it as a ICD libname",
 	  dir_path);
       }
-      goto abort;
+      debug(D_DUMP,"%s failed", dir_path);
+      //if user_dir==1 not any driver available
+      //this is equal with original
+      dir_path=NULL;
+    } else {
+  	  num_icds = _find_num_icds(dir);
+  	  debug(D_DUMP,"path %s found - num icds count %i", dir_path, num_icds);
     }
+/* freedesktop opensource drivers */
+#ifdef LIBDIR_OPENCL_VENDORS
+    if ((dir_path_libdir != NULL) && (user_dir == 0) ) {
+      debug(D_DUMP,"Reading icd list from %s", dir_path_libdir_gl);
+      dir_libdir = opendir(dir_path_libdir);
+      if(dir_libdir == NULL) {
+	      if (errno == ENOTDIR) {
+	           debug(D_DUMP, "libdir %s is not a directory.",
+		       dir_path_libdir);
+	      }
+	      debug(D_DUMP,"%s failed", dir_path_libdir);
+	      dir_path_libdir=NULL;
+      } else {
+	      num_icds += _find_num_icds(dir_libdir);
+	      debug(D_DUMP,"path %s found - num icds count %i", dir_path_libdir, num_icds);
+      }
+    }
+#endif // LIBDIR_OPENCL_VENDORS
+/* freedesktop  appropriate drivers */
+#ifdef LIBDIR_GL_OPENCL_VENDORS
+    if ((dir_path_libdir_gl != NULL) && (user_dir == 0)) {
+      debug(D_DUMP,"Reading icd list from %s", dir_path_libdir_gl);
+      dir_libdir_gl = opendir(dir_path_libdir_gl);
+      if(dir_libdir_gl == NULL) {
+ 	      if (errno == ENOTDIR) {
+   	    	  debug(D_DUMP, "libdir/GL %s is not a directory.",
+   	    	  dir_path_libdir_gl);
+   	      }
+   	      debug(D_DUMP,"%s failed", dir_path_libdir_gl);
+   	      dir_path_libdir_gl=NULL;
+      } else {
+   	      num_icds += _find_num_icds(dir_libdir_gl);
+   	      debug(D_DUMP,"path %s found - num icds count %i", dir_path_libdir_gl, num_icds);
+      }
+    }
+#endif //  LIBDIR_GL_OPENCL_VENDORS
 
-    num_icds = _find_num_icds(dir);
     if(num_icds == 0) {
       goto abort;
     }
@@ -643,18 +701,38 @@
       num_icds = _load_icd(0, dir_path);
     }
   } else {
-    num_icds = _open_drivers(dir, dir_path);
+	num_icds = 0;
+	if (dir_path != NULL) {
+		num_icds = _open_drivers(dir, dir_path,num_icds);
+		debug(D_DUMP,"search for drivers at %s. num icds count %i", dir_path_libdir_gl, num_icds);
+	}
+#ifdef LIBDIR_OPENCL_VENDORS
+    if (dir_path_libdir != NULL) {
+    	num_icds = _open_drivers(dir_libdir, dir_path_libdir, num_icds);
+        debug(D_DUMP,"search for drivers at %s. num icds count %i", dir_path_libdir_gl, num_icds);
+    }
+#endif //LIBDIR_OPENCL_VENDORS
+#ifdef LIBDIR_GL_OPENCL_VENDORS
+    if (dir_path_libdir_gl != NULL) {
+        num_icds = _open_drivers(dir_libdir_gl, dir_path_libdir_gl, num_icds);
+        debug(D_DUMP,"search for drivers at %s. num icds count %i", dir_path_libdir_gl, num_icds);
+    }
+#endif // LIBDIR_GL_OPENCL_VENDORS
   }
   if(num_icds == 0) {
+	debug(D_DUMP,"ABORT: no num_icds");
     goto abort;
   }
 
   _find_and_check_platforms(num_icds);
+  
   if(_num_icds == 0){
+	debug(D_DUMP,"ABORT: no _num_icds");
     goto abort;
   }
 
   if (_num_icds < num_icds) {
+    debug(D_DUMP,"_num_icds < num_icds - memory reservesion");
     _icds = (struct vendor_icd*)realloc(_icds, _num_icds * sizeof(struct vendor_icd));
   }
   debug(D_WARN, "%d valid vendor(s)!", _num_icds);
@@ -662,7 +740,16 @@
   if (dir != NULL){
     closedir(dir);
   }
+
+  if (dir_libdir != NULL){
+    closedir(dir_libdir);
+  }
+
+  if (dir_libdir_gl != NULL){
+    closedir(dir_libdir_gl);
+  }
   return;
+
  abort:
   _num_icds = 0;
   if (_icds) {
@@ -672,6 +759,15 @@
   if (dir != NULL){
     closedir(dir);
   }
+
+  if (dir_libdir != NULL){
+    closedir(dir_libdir);
+  }
+
+  if (dir_libdir_gl != NULL){
+    closedir(dir_libdir_gl);
+  }
+
   return;
 }
 
