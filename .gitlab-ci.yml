image: buildstream/buildstream-fedora:1.0.1

variables:
  # Store everything under the /builds directory. This is a separate Docker
  # volume. Note that GitLab CI will only cache stuff inside the build
  # directory.
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/cache"
  GET_SOURCES_ATTEMPTS: 3
  BST_CACHE_SERVER_ADDRESS: '46.101.55.213'
  BST_CACHE_SSH_USER: 'artifacts'

  # Generic variable for invoking buildstream
  BST: bst --colors

stages:
  - build
  - flatpak

before_script:
  - export PATH=~/.local/bin:${PATH}
  - export BST_SHA='b340f995455b997995fc55277a993d5f5a1656e5' # 1.0.1
  # Manually install packages, needed for ARM runners until #39 is solved
  - dnf install -y bubblewrap fuse fuse-libs git python3-gobject python3-psutil ostree python3-ruamel-yaml patch lzip
  - git clone https://gitlab.com/BuildStream/buildstream.git
  - git -C buildstream checkout $BST_SHA
  - pip3 install --user buildstream/

  # Create ~/.ssh for storing keys
  - mkdir -p ~/.ssh

  # Private key stored as a protected variable that allows pushing to
  # artifacts@cache.sdk.freedesktop.org
  - |
    if [ -z "$freedesktop_ostree_cache_private_key" ]; then
        echo >&2 "Private key for cache.sdk.freedesktop.org is not available."
    else
        echo "$freedesktop_ostree_cache_private_key" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    fi

  # Use internal network only if we are using x86_64 runners from DigitalOcean
  - |
    if [ "${CI_RUNNER_DESCRIPTION}" == 'manager-runner-freedesktop' ]; then
        export BST_CACHE_SERVER_ADDRESS="${GITLAB_BST_CACHE_IP}"
        export BST_CACHE_SSH_USER='artifacts-internal'
    fi

  # Trust the host key of the cache server.
  - ssh-keyscan "${BST_CACHE_SERVER_ADDRESS}" >> ~/.ssh/known_hosts

  # If we can push, then enable push and pull for freedesktop-sdk artifact cache
  # (default config is pull only)
  - |
    if [ -n "$freedesktop_ostree_cache_private_key" ]; then
        mkdir -p ~/.config
        echo "projects:" > ~/.config/buildstream.conf
        echo "  base-sdk-bootstrap:" >> ~/.config/buildstream.conf
        echo "    artifacts:" >> ~/.config/buildstream.conf
        echo "      url: ssh://${BST_CACHE_SSH_USER}@${BST_CACHE_SERVER_ADDRESS}/artifacts/" >> ~/.config/buildstream.conf
        echo "  base-sdk:" >> ~/.config/buildstream.conf
        echo "    artifacts:" >> ~/.config/buildstream.conf
        echo "      url: ssh://${BST_CACHE_SSH_USER}@${BST_CACHE_SERVER_ADDRESS}/artifacts/" >> ~/.config/buildstream.conf
    fi

# Store all the downloaded git and ostree repos in the distributed cache.
# This saves us fetching them on every build
.bst_cache: &bst_cache
  cache:
    key: bst
    paths:
      - "${XDG_CACHE_HOME}/buildstream/sources/"



.build_template: &build_definition
  stage: build
  script:
    - cd bootstrap
    - ${BST} -o target_arch "${ARCH}" build bootstrap-with-links.bst
    - ${BST} -o target_arch "${ARCH}" build bootstrap-platform-with-links.bst
    - ${BST} -o target_arch "${ARCH}" checkout bootstrap-with-links.bst checkout-sdk
    - ${BST} -o target_arch "${ARCH}" checkout bootstrap-platform-with-links.bst checkout-platform
    - mv checkout-sdk "${CI_PROJECT_DIR}/sdk/bootstrap-image-${ARCH}"
    - mv checkout-platform "${CI_PROJECT_DIR}/sdk/bootstrap-image-platform-${ARCH}"
    - cd "${CI_PROJECT_DIR}"/sdk
    - ${BST} -o target_arch "${ARCH}" build all.bst

build_x86_64:
  dependencies:
    - bootstrap_x86_64
  <<: *build_definition
  tags:
    - x86_64
  variables:
    ARCH: x86_64

build_i586:
  dependencies:
    - bootstrap_i586
  <<: *build_definition
  tags:
    - x86_64
  variables:
    ARCH: i586

build_aarch64:
  image: arm64v8/fedora:27
  dependencies:
    - bootstrap_aarch64
  <<: *build_definition
  tags:
    - aarch64
  variables:
    ARCH: aarch64



.flatpak_template: &flatpak_definition
  stage: flatpak
  script:
    - cd bootstrap
    - bst -o target_arch "${ARCH}" build bootstrap-with-links.bst
    - bst -o target_arch "${ARCH}" build bootstrap-platform-with-links.bst
    - bst -o target_arch "${ARCH}" checkout bootstrap-with-links.bst checkout-sdk
    - bst -o target_arch "${ARCH}" checkout bootstrap-platform-with-links.bst checkout-platform
    - mv checkout-sdk "${CI_PROJECT_DIR}/sdk/bootstrap-image-${ARCH}"
    - mv checkout-platform "${CI_PROJECT_DIR}/sdk/bootstrap-image-platform-${ARCH}"
    - cd "${CI_PROJECT_DIR}"/sdk
    - bst -o target_arch "${ARCH}" build all.bst

    - echo "Export runtimes to a ostree repo"
    - mkdir runtimes
    - |
      for runtime in sdk platform; do
        bst -o target_arch "${ARCH}" checkout "${runtime}.bst" "runtimes/${runtime}";
      done
    - cd ${CI_PROJECT_DIR}

    - echo "Use flatpak builder to export the runtimes to a ostree repo"
    - dnf install -y flatpak flatpak-builder
    - export FLATPAK_USER_DIR="${PWD}/tmp-flatpak"
    - flatpakarch="${ARCH/i586/i386}"
    - flatpak build-export --arch=${ARCH} --files=files repo/ sdk/runtimes/sdk unstable;
    - flatpak build-export --arch=${ARCH} --files=files repo/ sdk/runtimes/platform unstable;

    - echo "Locally install generated flatpak runtimes"
    - flatpak remote-add --if-not-exists --user --no-gpg-verify test-repo repo/
    - flatpak install --arch="${flatpakarch}" --user test-repo runtime/org.freedesktop.Sdk//unstable
    - flatpak install --arch="${flatpakarch}" --user test-repo runtime/org.freedesktop.Platform//unstable

    - echo "Build basic flatpak app"
    - flatpak-builder --arch="${flatpakarch}" build_folder tests/org.flatpak.Hello.json

    - echo "Run basic application"
    - flatpak-builder --arch="${flatpakarch}" --run build_folder tests/org.flatpak.Hello.json hello.sh

app_x86_64:
  dependencies:
    - build_x86_64
  <<: *flatpak_definition
  tags:
    - x86_64
  variables:
    ARCH: x86_64

app_aarch64:
  image: arm64v8/fedora:27
  dependencies:
    - build_aarch64
  <<: *flatpak_definition
  tags:
    - aarch64
  variables:
    ARCH: aarch64
