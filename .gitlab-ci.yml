image: buildstream/buildstream-fedora:master-113-499df6a5

variables:
  # Store everything under the /builds directory. This is a separate Docker
  # volume. Note that GitLab CI will only cache stuff inside the build
  # directory.
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/cache"
  GET_SOURCES_ATTEMPTS: 3
  BST_CACHE_SERVER_ADDRESS: 'testcache.codethink.co.uk'
  BST_RELEASES_SERVER_ADDRESS: 'cache.sdk.freedesktop.org'
  RUNTIME_VERSION: '18.08'

  # Generic variable for invoking buildstream
  BST: bst --colors

stages:
  - flatpak
  - vm
  - publish_x86_64
  - publish_i586
  - publish_aarch64
  - publish_arm

before_script:
  - export PATH=~/.local/bin:${PATH}
  - export BST_SHA='301a393cb6499b3f869d74827a9e8dc61b97d00e' #  1.1.7
  - git clone https://gitlab.com/BuildStream/buildstream.git
  - git -C buildstream checkout $BST_SHA
  - pip3 install --user buildstream/
  - export BST_EXTERNAL_SHA='f5bb2ac9d511a93c8709c32b70d24d3a57a0c15c' #  0.4
  - git clone https://gitlab.com/BuildStream/bst-external.git
  - git -C bst-external checkout $BST_EXTERNAL_SHA
  - pip3 install --user ./bst-external

  # Create ~/.ssh for storing keys
  - mkdir -p ~/.ssh

  # Private key stored as a protected variable that allows pushing to
  # cache.sdk.freedesktop.org
  - |
    if [ -z "$freedesktop_ostree_cache_private_key" ]; then
        echo >&2 "Private key for cache.sdk.freedesktop.org is not available."
    else
        echo "$freedesktop_ostree_cache_private_key" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    fi

  # Create CAS directory for SSL keys
  - mkdir -p /etc/ssl/CAS
 
  # Private SSL keys/certs for psuhing to the CAS server
  - |
    if [ -z "$GITLAB_CAS_PUSH_CERT" ]; then
       echo >&2 "Private CAS cert not found"
    else
       echo "$GITLAB_CAS_PUSH_CERT" > /etc/ssl/CAS/server.crt
       echo "$GITLAB_CAS_PUSH_KEY" > /etc/ssl/CAS/server.key
    fi

  # If we can push, then enable push and pull for freedesktop-sdk artifact cache
  # (default config is pull only)
  - |
    if [ -n "$freedesktop_ostree_cache_private_key" ]; then
        mkdir -p ~/.config
        echo "projects:" > ~/.config/buildstream.conf
        echo "  freedesktop-sdk-bootstrap:" >> ~/.config/buildstream.conf
        echo "    artifacts:" >> ~/.config/buildstream.conf
        echo "      url: https://${BST_CACHE_SERVER_ADDRESS}:11002" >> ~/.config/buildstream.conf
        echo "      client-key: /etc/ssl/CAS/server.key" >> ~/.config/buildstream.conf
        echo "      client-cert: /etc/ssl/CAS/server.crt" >> ~/.config/buildstream.conf
        echo "      push: true" >> ~/.config/buildstream.conf
        echo "  freedesktop-sdk:" >> ~/.config/buildstream.conf
        echo "    artifacts:" >> ~/.config/buildstream.conf
        echo "      url: https://${BST_CACHE_SERVER_ADDRESS}:11002" >> ~/.config/buildstream.conf
        echo "      client-key: /etc/ssl/CAS/server.key" >> ~/.config/buildstream.conf
        echo "      client-cert: /etc/ssl/CAS/server.crt" >> ~/.config/buildstream.conf
        echo "      push: true" >> ~/.config/buildstream.conf
    fi

# Store all the downloaded git and ostree repos in the distributed cache.
# This saves us fetching them on every build
.gitlab_cache_template_pull: &gitlab_cache_pull
  cache:
    key: bst
    paths:
      - "${XDG_CACHE_HOME}/buildstream/sources/"
    policy: pull

.gitlab_cache_template_pull_push: &gitlab_cache_pull_push
  cache:
    key: bst
    paths:
      - "${XDG_CACHE_HOME}/buildstream/sources/"



.flatpak_template: &flatpak_definition
  stage: flatpak
  script:
    - make ARCH=${ARCH} build
    - make ARCH=${ARCH} check-dev-files

    - echo "Export runtimes to a ostree repo"
    - mkdir runtimes
    - |
      for runtime in sdk platform rust; do
        bst -o target_arch "${ARCH}" checkout "flatpak-images/${runtime}.bst" "runtimes/${runtime}";
      done

    - echo "Use flatpak builder to export the runtimes to a ostree repo"
    - flatpakarch="${ARCH/i586/i386}"
    - dnf install -y flatpak flatpak-builder --enablerepo=updates-testing
    - export FLATPAK_USER_DIR="${PWD}/tmp-flatpak"
    - flatpak build-export --arch=${flatpakarch} --files=files repo/ runtimes/sdk "${RUNTIME_VERSION}";
    - flatpak build-export --arch=${flatpakarch} --files=files repo/ runtimes/platform "${RUNTIME_VERSION}";
    - flatpak build-export --arch=${flatpakarch} --files=files repo/ runtimes/rust "${RUNTIME_VERSION}";

    - echo "Locally install generated flatpak runtimes"
    - flatpak remote-add --if-not-exists --user --no-gpg-verify test-repo repo/
    - flatpak install -y --arch="${flatpakarch}" --user test-repo runtime/org.freedesktop.Sdk//"${RUNTIME_VERSION}"
    - flatpak install -y --arch="${flatpakarch}" --user test-repo runtime/org.freedesktop.Platform//"${RUNTIME_VERSION}"
    - flatpak install -y --arch="${flatpakarch}" --user test-repo runtime/org.freedesktop.Sdk.Extension.rust-stable//"${RUNTIME_VERSION}"

    - echo "Build basic flatpak application  (script)"
    - flatpak-builder --arch="${flatpakarch}" build_folder_hello tests/org.flatpak.Hello.json
    - echo "Build basic flatpak application (C binary)"
    - flatpak-builder --arch="${flatpakarch}" build_folder_gnu_hello tests/org.gnu.hello.json
    - echo "Build basic flatpak application  (Rust binary)"
    - flatpak-builder --arch="${flatpakarch}" build_folder_rust_hello tests/org.flatpak.Rust.Hello.json

    - echo "Run basic flatpak application (script)"
    - flatpak-builder --arch="${flatpakarch}" --run build_folder_hello tests/org.flatpak.Hello.json hello.sh
    - echo "Run basic flatpak application (C binary)"
    - flatpak-builder --arch="${flatpakarch}" --run build_folder_gnu_hello tests/org.gnu.hello.json hello
    - echo "Run basic flatpak application (Rust binary)"
    - flatpak-builder --arch="${flatpakarch}" --run build_folder_rust_hello tests/org.flatpak.Rust.Hello.json hello
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/cache/buildstream/logs
  except:
    - master
    - '18.08'
  <<: *gitlab_cache_pull

app_x86_64:
  <<: *flatpak_definition
  tags:
    - x86_64
  variables:
    ARCH: x86_64

app_i586:
  <<: *flatpak_definition
  tags:
    - x86_64
  variables:
    ARCH: i586

app_aarch64:
  image: buildstream/buildstream-fedora:aarch64-master-113-499df6a5
  <<: *flatpak_definition
  tags:
    - aarch64
  variables:
    ARCH: aarch64

app_arm:
  image: buildstream/buildstream-fedora:aarch64-master-113-499df6a5
  <<: *flatpak_definition
  tags:
    - armhf
  variables:
    ARCH: arm


.vm_image_template: &vm_image
  stage: vm
  script:
    - ${BST} -o target_arch "${ARCH}" build vm/"${TYPE}"-vm-image-"${ARCH}".bst
    - ${BST} -o target_arch "${ARCH}" checkout vm/"${TYPE}"-vm-image-"${ARCH}".bst ./vm
    - dnf install -y qemu-system-x86
    - utils/test-minimal-system --dialog "${DIALOG}" vm/sda.img
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/cache/buildstream/logs
  except:
    - master
    - '18.08'
  <<: *gitlab_cache_pull

minimal_vm_image_x86_64:
  tags:
    - x86_64
  <<: *vm_image
  variables:
    ARCH: x86_64
    TYPE: minimal
    DIALOG: minimal

minimal_systemd_vm_image_x86_64:
  tags:
    - x86_64
  <<: *vm_image
  variables:
    ARCH: x86_64
    TYPE: minimal-systemd
    DIALOG: root-login

.flatpak_runtimes_publish_template: &flatpak_runtimes_publish
  script:
    - |
      dnf install -y gpg

    - |
      [ -n "${FREEDESKTOP_GPG_PRIV}" ]

    - |
      echo "${FREEDESKTOP_GPG_PRIV}" | base64 --decode | gpg --import

    - ${BST} -o target_arch "${ARCH}" fetch all.bst
    - make ARCH=${ARCH} build

    - flatpakarch="${ARCH/i586/i386}"
    - mkdir runtimes
    - |
      for runtime in sdk{,-debug,-docs,-locale} platform{,-locale,-arch-libs{,-debug},-vaapi,-html5} glxinfo{,-debug} rust; do
        if [ "${runtime}" = "platform-vaapi" ]; then
           if [ "${ARCH}" = "aarch64" ] || [ "${ARCH}" = "arm" ]; then
             continue
           fi
        fi
        bst -o target_arch "${ARCH}" checkout --hardlinks "flatpak-images/${runtime}.bst" "runtimes/${runtime}";
      done
    - echo "Clone the releases OSTree repo locally"
    - ostree init --repo=releases --mode=archive-z2
    - ostree remote add --repo=releases origin "https://${BST_RELEASES_SERVER_ADDRESS}/releases/" --no-gpg-verify
    - ostree pull --repo=releases origin --mirror

    - echo "Use flatpak to export the runtimes to a ostree repo"
    - dnf install -y flatpak --enablerepo=updates-testing
    - echo "Commit the binaries to the correct branch"
    - |
      for runtime in sdk{,-debug,-docs,-locale} platform{,-locale,-arch-libs{,-debug},-vaapi,-html5} glxinfo{,-debug} rust; do
        if [ "${runtime}" = "platform-vaapi" ]; then
           if [ "${ARCH}" = "aarch64" ] || [ "${ARCH}" = "arm" ]; then
             continue
           fi
        fi
        flatpak build-export --gpg-sign="${FREEDESKTOP_GPG_ID}" --arch="${flatpakarch}" --files=files releases "runtimes/${runtime}" "${RUNTIME_VERSION}"
      done
    - |
      case "${ARCH}" in
        "i586")
          flatpak build-commit-from --gpg-sign="${FREEDESKTOP_GPG_ID}" --src-ref=runtime/org.freedesktop.Platform.Compat."${flatpakarch}"/"${flatpakarch}"/"${RUNTIME_VERSION}" releases runtime/org.freedesktop.Platform.Compat."${flatpakarch}"/x86_64/"${RUNTIME_VERSION}"
          flatpak build-commit-from --gpg-sign="${FREEDESKTOP_GPG_ID}" --src-ref=runtime/org.freedesktop.Platform.Compat."${flatpakarch}".Debug/"${flatpakarch}"/"${RUNTIME_VERSION}" releases runtime/org.freedesktop.Platform.Compat."${flatpakarch}".Debug/x86_64/"${RUNTIME_VERSION}"
          ;;
        "arm")
          flatpak build-commit-from --gpg-sign="${FREEDESKTOP_GPG_ID}" --src-ref=runtime/org.freedesktop.Platform.Compat."${flatpakarch}"/"${flatpakarch}"/"${RUNTIME_VERSION}" releases runtime/org.freedesktop.Platform.Compat."${flatpakarch}"/aarch64/"${RUNTIME_VERSION}"
          flatpak build-commit-from --gpg-sign="${FREEDESKTOP_GPG_ID}" --src-ref=runtime/org.freedesktop.Platform.Compat."${flatpakarch}".Debug/"${flatpakarch}"/"${RUNTIME_VERSION}" releases runtime/org.freedesktop.Platform.Compat."${flatpakarch}".Debug/aarch64/"${RUNTIME_VERSION}"
          ;;
      esac
    - echo "Push to the releases ostree repo"
    - export OSTREE_PUSH_SHA='9aa82b67325786a810653155b952a17b7ccc436a'
    - git clone https://github.com/ssssam/ostree-push.git
    - git -C ostree-push/ checkout "${OSTREE_PUSH_SHA}"
    # Trust the host key of the release server.
    - ssh-keyscan "${BST_RELEASES_SERVER_ADDRESS}" >> ~/.ssh/known_hosts
    - ostree-push/ostree-push --repo=releases ssh://releases@"${BST_RELEASES_SERVER_ADDRESS}"
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/cache/buildstream/logs
  only:
    - master
    - '18.08'
  <<: *gitlab_cache_pull_push

publish_x86_64:
  stage: publish_x86_64
  <<: *flatpak_runtimes_publish
  tags:
    - x86_64
  variables:
    ARCH: x86_64

publish_i586:
  stage: publish_i586
  <<: *flatpak_runtimes_publish
  tags:
    - x86_64
  variables:
    ARCH: i586

publish_aarch64:
  stage: publish_aarch64
  image: buildstream/buildstream-fedora:aarch64-master-113-499df6a5
  <<: *flatpak_runtimes_publish
  tags:
    - aarch64
  variables:
    ARCH: aarch64

publish_arm:
  stage: publish_arm
  image: buildstream/buildstream-fedora:aarch64-master-113-499df6a5
  <<: *flatpak_runtimes_publish
  tags:
    - armhf
  variables:
    ARCH: arm
