variables:
  conf-deterministic: |
    --enable-deterministic-archives
  conf-link-args: |
    --enable-shared \
    --disable-static
  conf-host: |
    --host=%{host-triplet}
  conf-build: |
    --build=%{build-triplet}
  host-triplet: "%{triplet}"
  build-triplet: "%{triplet}"
  guessed-triplet: "$(sh %{sysroot}/usr/share/gnu-config/config.guess)"
  sysconfdir: "%{prefix}/etc"
  localstatedir: "%{prefix}/var"
  tools: "%{prefix}"
  sysroot: ""
  debugdir: "/usr/lib/debug"
  sourcedir: "%{debugdir}/source"
  lib: "lib/%{gcc_triplet}"
  indep-libdir: "%{prefix}/lib"
  sbindir: "%{bindir}"

  gcc_triplet: "%{gcc_arch}-linux-%{abi}"
  triplet: "%{arch}-unknown-linux-%{abi}"
  gcc_arch: "%{arch}"
  abi: "gnu"
  (?):
    - target_arch == "i586":
        gcc_arch: "i386"
    - target_arch == "arm":
        abi: "gnueabihf"

  strip-binaries: |
    touch source-files
    touch source-files-sysroot
    find "%{install-root}" -type f \
      '(' -perm -111 -o -name '*.so*' \
          -o -name '*.cmxs' -o -name '*.node' ')' \
          -print0 | while read -r -d $'\0' file; do
      read -n4 hdr <"${file}" || continue # check for elf header
      if [ "${hdr}" != "$(printf \\x7fELF)" ]; then
        continue
      fi
      case "${file}" in
        "%{install-root}%{debugdir}/"*|"%{install-root}%{sysroot}%{debugdir}/"*)
          continue
          ;;
      esac
      realpath="$(realpath -s --relative-to="%{install-root}%{sysroot}" "${file}")"
      debugfile="%{install-root}%{sysroot}%{debugdir}/${realpath}.debug"
      sourcedir="%{install-root}%{sysroot}%{sourcedir}"
      source_files=source-files
      toolchain=""
      if [ -n "%{sysroot}" ]; then
        case "${file}" in
          "%{install-root}%{sysroot}/"*)
            source_files=source-files-sysroot
            toolchain="%{tools}/%{triplet}/bin/"
            ;;
        esac
      fi
      if "${toolchain}objdump" -j .gnu_debuglink -s "${file}" &>/dev/null; then
        continue
      fi
      mkdir -p "$(dirname "$debugfile")"
      if [ -x "$(command -v debugedit)" ]; then
        debugedit -i --list-file=${source_files}.part --base-dir="%{build-root}" --dest-dir="%{sourcedir}/%{element-name}" "${file}"
        cat "${source_files}.part" >>"${source_files}"
      fi
      "${toolchain}objcopy" %{objcopy-extract-args} "${file}" "$debugfile"
      chmod 644 "$debugfile"
      mode="$(stat -c 0%a "${file}")"
      [ -w "${file}" ] || chmod +w "${file}"
      "${toolchain}strip" %{strip-args} "${file}"
      "${toolchain}objcopy" %{objcopy-link-args} "$debugfile" "${file}"
      chmod "${mode}" "${file}"
    done
    sort -zu  <source-files | while read -r -d $'\0' source; do
      dst="%{install-root}%{sourcedir}/%{element-name}/${source}"
      src="%{build-root}/${source}"
      if [ -d "${src}" ]; then
        install -m0755 -d "${dst}"
        continue
      fi
      [ -f "${src}" ] || continue
      install -m0644 -D "${src}" "${dst}"
    done
    sort -zu  <source-files-sysroot | while read -r -d $'\0' source; do
      dst="%{install-root}%{sysroot}%{sourcedir}/%{element-name}/${source}"
      src="%{build-root}/${source}"
      if [ -d "${src}" ]; then
        install -m0755 -d "${dst}"
        continue
      fi
      [ -f "${src}" ] || continue
      install -m0644 -D "${src}" "${dst}"
    done

shell:
  # This file is taken from GNOME-build-meta

  # Default command for `bst shell`, we prefer bash, and disable
  # parsing of profile and rc files so that the prompt BuildStream
  # sets is not overwritten.
  command: [ 'bash', '--noprofile', '--norc', '-i' ]

  # Some environment variables to inherit from the host environment
  environment:
    LANG: '$LANG'
    DISPLAY: '$DISPLAY'
    DBUS_SESSION_BUS_ADDRESS: '$DBUS_SESSION_BUS_ADDRESS'
    XDG_RUNTIME_DIR: '$XDG_RUNTIME_DIR'

    # Inform applications which use pulseaudio of the server socket
    PULSE_SERVER: 'unix:${XDG_RUNTIME_DIR}/pulse/native'

  # Some things to mount into the sandbox
  host-files:
    # Understand user inherited uid/gid
    - '/etc/passwd'
    - '/etc/group'
    # Allow network resolution
    - '/etc/resolv.conf'

    # Allow access to plausible video devices,
    # declare these optional to avoid meaningless warnings
    - path: '/dev/dri'
      optional: True
    - path: '/dev/mali'
      optional: True
    - path: '/dev/mali0'
      optional: True
    - path: '/dev/umplock'
      optional: True
    - path: '/dev/nvidiactl'
      optional: True
    - path: '/dev/nvidia0'
      optional: True
    - path: '/dev/nvidia-modeset'
      optional: True

    # Allow access to sysfs, needed for local device discovery
    - '/sys'

    # Allow access to the user runtime directory, this
    # will include the pulseaudio socket along with some
    # other things.
    - '${XDG_RUNTIME_DIR}'

environment:
  CPPFLAGS: "-O2 -D_FORTIFY_SOURCE=2"
  CFLAGS: "-O2 -g -fstack-protector-strong"
  CXXFLAGS: "-O2 -g -fstack-protector-strong"
  LDFLAGS: "-fstack-protector-strong -Wl,-z,relro,-z,now"
  LC_ALL: en_US.UTF-8

elements:
  cmake:
    variables:
      generator: Ninja

  autotools:
    variables:
      builddir: "bst_build_dir"
      remove_libtool_modules: "true"
      remove_libtool_libraries: "true"
      delete_libtool_files: |
        find "%{install-root}" -name "*.la" -print0 | while read -d '' -r file; do
          if grep '^shouldnotlink=yes$' "${file}" &>/dev/null; then
            if %{remove_libtool_modules}; then
              echo "Removing ${file}."
              rm "${file}"
            else
              echo "Not removing ${file}."
            fi
          else
            if %{remove_libtool_libraries}; then
              echo "Removing ${file}."
              rm "${file}"
            else
              echo "Not removing ${file}."
            fi
          fi
        done
      conf-global: |
        %{conf-deterministic} \
        %{conf-link-args} \
        %{conf-build} \
        %{conf-host}
      conf-cmd: configure

    config:
      configure-commands:
        - |
          %{autogen}
          if [ -n "%{builddir}" ]; then
            mkdir %{builddir}
            cd %{builddir}
              reldir=..
            else
              reldir=.
          fi
          ${reldir}/%{configure}

      build-commands:
        - |
          if [ -n "%{builddir}" ]; then
            cd %{builddir}
          fi
          %{make}

      install-commands:
        - |
          if [ -n "%{builddir}" ]; then
            cd %{builddir}
          fi
          %{make-install}

        - |
          %{delete_libtool_files}

split-rules:
  devel:
    - "%{includedir}"
    - "%{includedir}/**"
    - "%{libdir}/pkgconfig"
    - "%{libdir}/pkgconfig/**"
    - "%{datadir}/pkgconfig"
    - "%{datadir}/pkgconfig/**"
    - "%{datadir}/aclocal"
    - "%{datadir}/aclocal/**"
    - "%{prefix}/lib/cmake"
    - "%{prefix}/lib/cmake/**"
    - "%{libdir}/cmake"
    - "%{libdir}/cmake/**"
    - "%{prefix}/lib/*.a"
    - "%{libdir}/*.a"

  debug:
    - "%{debugdir}/**"
